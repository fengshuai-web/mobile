{"remainingRequest":"D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\src\\components\\xz\\Cart.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\src\\components\\xz\\Cart.vue","mtime":1570608907944},{"path":"D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\Feng\\si\\VUEUI\\day01ex\\vue_app_000\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: [],\n      //购物车列表\n      allcb: false //全选按钮状态！\n\n    };\n  },\n  created: function created() {\n    //1:添加声明周期\n    this.loadMore();\n  },\n  methods: {\n    itemchange: function itemchange() {\n      //功能:商品复选框状态需改\n      // 1:累加商品状态\n      // 2:创建变量\n      var sum = 0; // 3:创建循环遍历商品状态\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.cb) {\n            sum++;\n          }\n        } // console.log(sum);\n        // console.log(this.list.length)\n        // 4:如果是true则变量数据+1\n        // 5:如果选中的数量与数组相同,\n        //将全选allcb=true\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (sum == this.list.length) {\n        this.allcb = true;\n      } else {\n        this.allcb = false;\n      }\n    },\n    delm: function delm() {\n      var _this = this;\n\n      //1:显示交互提示框，请用户再次确认是否删除指定商品\n      this.$messagebox.confirm(\"是否删除指定商品\").then(function (res) {\n        //回调函数\n        //2:选择确认\n        //3:创建空字符串\n        var str = \"\"; //4:创建循环遍历list数组,判断如果当前对象cb值为true将对象id拼接\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n\n            if (item.cb) {\n              str += item.id + \",\";\n            }\n          } //5:判断用户是否选中商品提示请选择要删除的商品\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (str.length == 0) {\n          _this.$messagebox(\"请选择要删除的商品\");\n\n          return;\n        } //0         起始下标\n        //str.length-1保存几个字符串\n\n\n        str = str.substring(0, str.length - 1);\n        console.log(str); //6:创建url创建obj\n\n        var url = \"delm\";\n        var obj = {\n          id: str\n        }; //7:发送ajax请求\n\n        _this.axios.get(url, {\n          params: obj\n        }).then(function (res) {\n          //console.log(res);\n          //8:更新加载购物车列表\n          _this.loadMore(); //9:提示删除成功 \n\n\n          _this.$toast(\"删除成功\");\n        });\n      }).catch(function (err) {//取消\n      });\n    },\n    selectAll: function selectAll(event) {\n      //1:添加参数event\n      //2:获取当前全选按钮状态\n      var all = event.target.checked; //3:复制所有商品cb\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          item.cb = all;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    },\n    del: function del(event) {\n      var _this2 = this;\n\n      // 1:为删除按钮添加自定义属性\n      // data-id保存当前购物车商品id\n      // 2:添加点击事件click del\n      // 2.1:交互提示 是否删除\n      this.$messagebox.confirm(\"是否删除指定商品\").then(function (res) {\n        //回调函数\n        // 3:获取当前商品id\n        var id = event.target.dataset.id; // 4:输出id\n\n        console.log(id); // 5:发送ajax请求\n\n        var url = \"del\";\n        var obj = {\n          id: id\n        };\n\n        _this2.axios.get(url, {\n          params: obj\n        }).then(function (res) {\n          console.log(res); // 6:获取服务器端返回数据\n\n          if (res.data.code > 0) {\n            _this2.$toast(\"删除成功\");\n\n            _this2.loadMore();\n          }\n        }); // 7:提示删除成功\n        // 8:重新调用loadMore\n\n      }).catch(function (err) {//取消\n      });\n    },\n    loadMore: function loadMore() {\n      var _this3 = this;\n\n      // 1:创建url\n      var url = \"findCart\"; // 2:发送ajax请求来获取购物车\n\n      this.axios.get(url).then(function (res) {\n        // console.log(res.data.code)\n        if (res.data.code == -1) {\n          //提示交互提示框\n          _this3.$messagebox(\"消息\", \"请登录\").then(function (res) {\n            //跳转登录组件\n            _this3.$router.push(\"/login\");\n          });\n        } else {\n          //(1)为每个商品添加状态\n          //res变量 data属性 data数组\n          var list = res.data.data;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = list[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var item = _step4.value;\n              item.cb = false;\n            } //(2)赋值\n\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          _this3.list = list; //(2.9)加载之前先清空\n\n          _this3.$store.commit(\"clearCart\"); //(3)创建循环遍历数组\n\n\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = _this3.list[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var item = _step5.value;\n\n              //(4)在循环中修改购物车的数量\n              _this3.$store.commit(\"addCart\");\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n      }); // 3:将服务器返回的数据保存到list\n    }\n  }\n};",{"version":3,"sources":["Cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <!-- <h1>购物车</h1> -->\r\n        <!-- (1)顶部复选框:全选 -->\r\n        <div>\r\n            全选 <input type=\"checkbox\" @change=\"selectAll\" v-model=\"allcb\"/>\r\n        </div>\r\n        <!-- (2)中间复选框:商品/价格/删除 -->\r\n        <div class=\"cart-item\" v-for=\"(item,i) of list\" :key=\"i\">\r\n            <div class=\"leftText\">\r\n                <input type=\"checkbox\" v-model=\"item.cb\" @change=\"itemchange\" />\r\n                <div class=\"lname\">{{item.lname}}</div>\r\n                <div class=\"price\">¥{{item.price}}</div>\r\n            </div>\r\n                <mt-button :data-id=\"item.id\" @click=\"del\">删除</mt-button>\r\n        </div>\r\n        <!-- (3)删除选中商品复选框 -->\r\n        <div>购物车中商品的数量\r\n            <span style=\"color:red\">\r\n                {{$store.getters.getCart}}\r\n            </span>\r\n            <mt-button @click=\"delm\">删除选中的商品</mt-button>\r\n        </div>\r\n    </div>\r\n    \r\n</template>\r\n<script>\r\nexport default {\r\n    data(){\r\n        return {\r\n            list:[],//购物车列表\r\n            allcb:false//全选按钮状态！\r\n        }\r\n    },\r\n    created() {//1:添加声明周期\r\n        this.loadMore();\r\n    },\r\n    methods:{\r\n        itemchange(){\r\n            //功能:商品复选框状态需改\r\n            // 1:累加商品状态\r\n            // 2:创建变量\r\n            var sum=0;\r\n            // 3:创建循环遍历商品状态\r\n            for(var item of this.list){\r\n                if(item.cb){\r\n                    sum++;\r\n                }\r\n            }\r\n            // console.log(sum);\r\n            // console.log(this.list.length)\r\n            // 4:如果是true则变量数据+1\r\n            // 5:如果选中的数量与数组相同,\r\n            //将全选allcb=true\r\n            if(sum==this.list.length){\r\n                this.allcb=true;\r\n            }else{\r\n                this.allcb=false;\r\n            }\r\n\r\n        },\r\n          delm(){\r\n                //1:显示交互提示框，请用户再次确认是否删除指定商品\r\n                this.$messagebox.confirm(\"是否删除指定商品\").then(res=>{\r\n                    //回调函数\r\n                //2:选择确认\r\n                //3:创建空字符串\r\n                var str=\"\";\r\n                //4:创建循环遍历list数组,判断如果当前对象cb值为true将对象id拼接\r\n                for(var item of this.list){\r\n                    if(item.cb){\r\n                     str+=item.id+\",\"\r\n                 }\r\n           }    \r\n                //5:判断用户是否选中商品提示请选择要删除的商品\r\n                if(str.length==0){\r\n                    this.$messagebox(\"请选择要删除的商品\");\r\n                    return;\r\n                }\r\n                //0         起始下标\r\n                //str.length-1保存几个字符串\r\n                str = str.substring(0,str.length-1);\r\n                console.log(str);\r\n                //6:创建url创建obj\r\n                var url = \"delm\";\r\n                var obj = {id:str};\r\n                //7:发送ajax请求\r\n                this.axios.get(url,{params:obj}).then(res=>{\r\n                    //console.log(res);\r\n                     //8:更新加载购物车列表\r\n                    this.loadMore();\r\n                      //9:提示删除成功 \r\n                    this.$toast(\"删除成功\");  \r\n             })\r\n             }).catch(err=>{\r\n                    //取消\r\n             }) \r\n        },\r\n        selectAll(event){\r\n          //1:添加参数event\r\n          //2:获取当前全选按钮状态\r\n          var all=event.target.checked;\r\n          //3:复制所有商品cb\r\n          for(var item of this.list){\r\n              item.cb=all;\r\n          }  \r\n        },\r\n        del(event){\r\n            // 1:为删除按钮添加自定义属性\r\n            // data-id保存当前购物车商品id\r\n            // 2:添加点击事件click del\r\n            // 2.1:交互提示 是否删除\r\n            this.$messagebox.confirm(\"是否删除指定商品\").then(res=>{\r\n                //回调函数\r\n            // 3:获取当前商品id\r\n            var id=event.target.dataset.id;\r\n            // 4:输出id\r\n            console.log(id)\r\n            // 5:发送ajax请求\r\n            var url=\"del\";\r\n            var obj={id};\r\n            this.axios.get(url,{params:obj}).then(res=>{\r\n                console.log(res)\r\n                // 6:获取服务器端返回数据\r\n            if(res.data.code > 0){\r\n                this.$toast(\"删除成功\")\r\n                this.loadMore();\r\n            }\r\n            })\r\n            \r\n            // 7:提示删除成功\r\n            // 8:重新调用loadMore\r\n            }).catch(err=>{\r\n                //取消\r\n            })\r\n        },\r\n        loadMore(){\r\n            // 1:创建url\r\n            var url=\"findCart\"\r\n            // 2:发送ajax请求来获取购物车\r\n            this.axios.get(url).then(res=>{\r\n                // console.log(res.data.code)\r\n                if(res.data.code==-1){\r\n                    //提示交互提示框\r\n                    this.$messagebox(\"消息\",\"请登录\").then(res=>{\r\n                        //跳转登录组件\r\n                        this.$router.push(\"/login\")\r\n                    })\r\n                }else{\r\n                    //(1)为每个商品添加状态\r\n                    //res变量 data属性 data数组\r\n                    var list=res.data.data;\r\n                    for(var item of list){\r\n                        item.cb=false;\r\n                    }\r\n                    //(2)赋值\r\n                    this.list=list;\r\n                    //(2.9)加载之前先清空\r\n                    this.$store.commit(\"clearCart\");\r\n                    //(3)创建循环遍历数组\r\n                    for(var item of this.list){\r\n                        //(4)在循环中修改购物车的数量\r\n                        this.$store.commit(\"addCart\");\r\n                    }\r\n                }\r\n            })\r\n            // 3:将服务器返回的数据保存到list\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n/* 1:购物车的商品内容 */\r\n    .cart-item{\r\n        display: flex;/*弹性布局 连段对齐*/\r\n        justify-content: space-between;\r\n        align-items: center;/*垂直居中*/\r\n        border-bottom:1px solid #ccc;\r\n        margin-top:25px;    /*顶部距离*/\r\n    }\r\n/*2.左侧复选框和文字设为弹性布局*/\r\n    .leftText{\r\n        display: flex;\r\n        align-items: center;/*垂直居中*/\r\n    }\r\n/*3.修饰商品名称*/\r\n    .lname{\r\n        margin-left:25px;\r\n        color:#333;\r\n    }\r\n/*4.修饰商品价格*/\r\n    .price{\r\n        margin-left:25px;\r\n        color:red;        \r\n    }\r\n</style>\r\n"],"sourceRoot":"src\\components\\xz"}]}